import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm

# With the power of data science and statistical modeling, this project was made to provide data-driven reasoning that Bradley Beal was ABSOLUTELY not worth the $251 million dollar supermax he signed in 2022.
# This is based on his tenure with the Wizards and how much he got paid relative to his actual efficient value on the court. 

# Manually Input Multiple Data Points for Bradley Beal's Performance Over Multiple Seasons
data = {
    'Season': ['2012-13', '2013-14', '2014-15', '2015-16', '2016-17', '2017-18', '2018-19', '2019-20', '2020-21', '2021-22', '2022-23'],
    'PPG': [13.9, 17.1, 15.3, 17.4, 23.1, 22.6, 25.6, 30.5, 31.3, 23.2, 23.2],
    'RPG': [3.8, 3.7, 3.8, 3.4, 3.1, 4.4, 5.0, 4.1, 4.7, 3.9, 3.9],
    'APG': [2.4, 3.3, 3.1, 2.9, 3.5, 4.5, 5.5, 6.1, 4.4, 5.4, 5.4],
    'Minutes': [31.2, 34.7, 33.4, 31.1, 34.9, 36.3, 36.9, 36.0, 35.8, 36.0, 33.5],
    'Salary': ['$4.8M', '$5.5M', '$5.8M', '$7.1M', '$22.1M', '$25.1M', '$25.3M', '$27.1M', '$28.2M', '$33.4M', '$43.2M']  # Formatted for readability
}

df = pd.DataFrame(data)

# Calculate the Efficiency dynamically (without a bunch of manual input)
df['Efficiency'] = (df['PPG'] + df['RPG'] + df['APG']) / df['Minutes']

# Display Bradley Beal's stats
print("Bradley Beal's Multi-Season Stats (Rookie Year to SuperMax Extension Year):")
print(df)

# Bar plot for Bradley Beal's performance metrics per season
plt.figure(figsize=(12, 6))
df.set_index('Season')[['PPG', 'RPG', 'APG']].plot(kind='bar', title="Bradley Beal's Performance Metrics", legend=True)
plt.xlabel('Season')
plt.ylabel('Value')
plt.show()

# Scatter plot for Efficiency vs PPG with adjusted text placement to avoid overlap and to help colorblind indivduals (by labeling)
plt.figure(figsize=(8, 6))
for i, season in enumerate(df['Season']):
    plt.scatter(df.loc[df['Season'] == season, 'Efficiency'], df.loc[df['Season'] == season, 'PPG'], s=100)
    plt.text(df.loc[df['Season'] == season, 'Efficiency'].values[0], 
             df.loc[df['Season'] == season, 'PPG'].values[0] + 0.3 * (-1)**i,  # Alternating text offset to prevent overlap (kinda proud of this)
             f"{i+1} ({df.loc[df['Season'] == season, 'Salary'].values[0]})", 
             fontsize=10, ha='right')
plt.title("Bradley Beal's Efficiency vs Points Per Game")
plt.xlabel('Efficiency')
plt.ylabel('PPG')
plt.show()

# Regression Analysis
# Defines independent variables
X = df[['Efficiency']]
y = df['PPG']

# Adding constant to the model for R-Squared
X = sm.add_constant(X)

# Fitting the regression model
model = sm.OLS(y, X).fit()

# Displays the summary
print(model.summary())
